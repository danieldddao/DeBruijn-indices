grammar Lambda ;

lambdaTerm: expr (NEWLINE | EOF);
//
//expr: var                          #Variable
//    | func                         #Function
//    | app                          #Application
//    | LEFT_PAREN expr RIGHT_PAREN  #ParenExpression
//;
//var: VAR
//    | LEFT_PAREN VAR RIGHT_PAREN
//;
//func: LAMBDA VAR DOT expr
//    | LEFT_PAREN func RIGHT_PAREN
//;
//app: app SPACE expr
//   | func SPACE expr
//   | app SPACE app
//   | var SPACE var
//;
//

expr: var
    | abst
    | func SPACE arg
    | LEFT_PAREN expr RIGHT_PAREN
;
var: VAR ;
abst: LAMBDA var DOT expr;
func: VAR
    | LEFT_PAREN abst RIGHT_PAREN
    | func SPACE arg
;
arg: VAR
   | LEFT_PAREN abst RIGHT_PAREN
   | LEFT_PAREN func SPACE arg RIGHT_PAREN
;

LAMBDA: '\\' ;
DOT: '.' ;
SPACE: ' ' ;
LEFT_PAREN: '(' ;
RIGHT_PAREN: ')' ;
VAR: [a-z];
WS: [\t\r\n]+ -> skip ;
NEWLINE: [\r\n]+ ;